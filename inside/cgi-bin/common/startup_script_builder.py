from __future__ import with_statement
from __future__ import print_function


import unittest
import commands

import constants

OPEN_VPN_KEY_FNAME = "openvpn.key"

def create_openvpn_server_cfg_file(client_ip = constants.OV_CLIENT_IP,
                                   server_ip = constants.OV_SERVER_IP,
                                   key_file = constants.OPENVPN_STATIC_KEY_FNAME):

    s = """dev tun
ifconfig %s %s
secret %s"""  % (server_ip, client_ip, key_file)   
    return s
    

def create_openvpn_client_cfg_file(hostname,
                            client_ip = constants.OV_CLIENT_IP,
                            server_ip = constants.OV_SERVER_IP,
                            key_file =  OPEN_VPN_KEY_FNAME):
    s = """
remote %s
dev tun
ifconfig %s %s
secret %s
    """ % (hostname, client_ip, server_ip, key_file)
    return s

def create_ros_connect_file(openvpn_client_ip = constants.OV_CLIENT_IP, 
                    openvpn_server_ip = constants.OV_SERVER_IP):
    s = """
            
# To connect via ROS:
# 1. Connect via OpenVPN (see above).
# 2. Download this file: [ros.sh] <- autogenerated with the right IP addresses
# 3. In a terminal, go to the directory containing that file.
# 4. Execute the following command:
#    . ros.sh
# 5. Now your environment is configured to connect to a ROS master running on this machine.
# 6. You may want to first [launch Gazebo|launch_page].

. /opt/ros/fuerte/setup.sh
export ROS_IP=%s
export ROS_MASTER_URI=http://%s:11311 
                """  % (openvpn_client_ip, openvpn_server_ip)
    return s


def create_ssh_connect_file(key_file, ip, username = "ubuntu"):
    s = """#!/bin/bash
    
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

ssh -i $DIR/%s %s@%s 
    """ % (key_file, username, ip)
    return s

def create_vpn_static_key():
    status, output = commands.getstatusoutput("openvpn --genkey --secret /dev/stdout")
    if status:
        raise Exception("openvpn is not installed")
    return output 

    
def inject_file_into_script(file_path, file_content):
    
    script_lines = []
    script_lines.append("")
    script_lines.append("")
    script_lines.append("\ncat <<DELIM > %s" % file_path)
    script_lines.append(file_content)
    script_lines.append("DELIM")
    script_lines.append("")
    script_lines.append("")
    return "\n".join(script_lines)
    

def create_vpn_connect_file():
    return """#!bin/bash
sudo openvpn --config openvpn.config"

"""

    
class ScriptTests(unittest.TestCase):

    def test_inject(self):
        
        machine_name = "gazebo_1234556"
        hostname = "toto.aws.com" 
       
        script = "mkdir %s" % machine_name
        # lines = output.split("\n")
        zip_dir_name = machine_name
        file_content = create_vpn_static_key()
        script += inject_file_into_script( "%s/static.key"% zip_dir_name, file_content )
        script += "chmod 644 testo/static.key\n"

        file_content = create_openvpn_client_cfg_file(hostname)
        script += inject_file_into_script( "%s/%s" % (zip_dir_name, constants.OPENVPN_CONFIG_FNAME), file_content)
        
        file_content = create_ros_connect_file()
        script += inject_file_into_script("%s/ros.sh" % zip_dir_name, file_content )
        
        script += "zip -r %s.zip %s\n" %  (zip_dir_name, zip_dir_name)
        script += "rm -rf %s\n" %  (zip_dir_name)
        

        # print(script)
        with open("test.sh", 'w') as f:
            f.write(script)
        
        s,o = commands.getstatusoutput("sh test.sh")
        print(s)
            
        

if __name__ == "__main__":
    print('Startup script TESTS')
    unittest.main()          